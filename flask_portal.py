#coding=utf-8from flask import Flaskfrom flask import render_templatefrom flask import jsonifyfrom flask import requestfrom flask import make_responseimport ConfigParserimport hashlibimport jsonimport demjsonfrom business.dbaction import eisfrom business.dbaction import TenantManageObjectfrom business.dbaction import AccountManageObjectfrom business.dbaction import RoleManageObjectfrom business.dbaction import PositionManageObjectfrom business.dbaction import DeptManageObjectfrom business.dbaction import GroupManageObjectapp = Flask(__name__)def build_result(state, msg):    message = dict()    message["state"] = state    message['msg'] = msg    result = json.dumps(message)    return result@app.route('/tenant.create', methods=['POST'])def tenant_create():    result = None    obj = request    company_name = request.form["name"]    company_desc = request.form['desc']    tmo = TenantManageObject()    tid = tmo.create(company_name, company_desc)    if(tid == ''):        result = build_result(0, 'error')        pass    else:        message = dict()        message["accesstoken"] = tid        message_str = json.dumps(message)        result = build_result(1, message_str)    return result@app.route('/tenant.edit', methods=['POST'])def tenant_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    tmo = TenantManageObject()    tid = params["tid"]    name = params["name"]    desc = params["desc"]    res = tmo.edit(tid, name, desc)    result = build_result(res, '')    return result@app.route('/tenant.delete', methods=['POST'])def tenant_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    tmo = TenantManageObject()    tid = params['tid']    res = tmo.delete(tid)    result = build_result(res, '')    return result@app.route('/usr.create', methods=["POST"])def usr_create():    result = None    obj = request    data = request.data    params = demjson.decode(data)    amo = AccountManageObject()    res = amo.add_user(params)    result = build_result(res, '')    return result@app.route('/usr.edit', methods=["POST"])def usr_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    amo = AccountManageObject()    res = amo.edit_user(params)    result = build_result(res, '')    return result@app.route('/usr.delete', methods=["POST"])def usr_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    amo = AccountManageObject()    res = amo.del_user(params)    result = build_result(res, '')    return result@app.route('/role.create', methods=["POST"])def role_create():    result = None    obj = request    data = request.data    params = demjson.decode(data)    rmo = RoleManageObject()    rid = rmo.create(params)    if (rid == ''):        result = build_result(0, 'error')        pass    else:        message = dict()        message["role_id"] = rid        message_str = json.dumps(message)        result = build_result(1, message_str)    return result@app.route('/role.edit', methods=["POST"])def role_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    rmo = RoleManageObject()    res = rmo.edit(params)    result = build_result(res, '')    return result@app.route('/role.delete', methods=["POST"])def role_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    rmo = RoleManageObject()    res = rmo.delete(params)    result = build_result(res, '')    return result@app.route('/position.create', methods=["POST"])def position_create():    result = None    obj = result    data = request.data    params = demjson.decode(data)    pmo = PositionManageObject()    pid = pmo.create(params)    if (pid == ''):        result = build_result(0, 'error')        pass    else:        message = dict()        message["position_id"] = pid        message_str = json.dumps(message)        result = build_result(1, message_str)    return result@app.route('/position.edit', methods=["POST"])def position_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    pmo = PositionManageObject()    res = pmo.edit(params)    result = build_result(res, '')    return result@app.route('/position.delete', methods=["POST"])def position_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    pmo = PositionManageObject()    res = pmo.delete(params)    result = build_result(res, '')    return result@app.route('/group.create', methods=["POST"])def group_create():    result = None    obj = result    data = request.data    params = demjson.decode(data)    gmo = GroupManageObject()    gid = gmo.create(params)    if (gid == ''):        result = build_result(0, 'error')        pass    else:        message = dict()        message["group_id"] = gid        message_str = json.dumps(message)        result = build_result(1, message_str)    return result@app.route('/group.edit', methods=["POST"])def group_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    gmo = GroupManageObject()    res = gmo.edit(params)    result = build_result(res, '')    return result@app.route('/group.delete', methods=["POST"])def group_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    gmo = GroupManageObject()    res = gmo.delete(params)    result = build_result(res, '')    return result@app.route('/dept.create', methods=["POST"])def dept_create():    result = None    obj = request    data = request.data    params = demjson.decode(data)    dmo = DeptManageObject()    did = dmo.create(params)    if (did == ''):        result = build_result(0, 'error')        pass    else:        message = dict()        message["dept_id"] = did        message_str = json.dumps(message)        result = build_result(1, message_str)    return result@app.route('/dept.edit', methods=["POST"])def dept_edit():    result = None    obj = request    data = request.data    params = demjson.decode(data)    dmo = DeptManageObject()    res = dmo.edit(params)    result = build_result(res, '')    return result@app.route('/dept.delete', methods=["POST"])def dept_delete():    result = None    obj = request    data = request.data    params = demjson.decode(data)    dmo = DeptManageObject()    res = dmo.delete(params)    result = build_result(res, '')    return result@app.route('/login')def sys_login():    return render_template('page-login.html')@app.route('/login.action', methods=['GET', 'POST'])def login():    result = None    message = dict()    try:        data_request = request.data        obj = request        usrname = request.form['username']        password = request.form['password']        #查询数据库存在        str = ("select * from eis_user where USERNAME_ = '%s' AND PASSWORD_ = '%s'" % (usrname, password))        #生成accesstoken        msg = dict()        msg["accesstoken"] = "691e922620860107b3cd4e0f200a630b"        msgstr = json.dumps(msg)        result = build_result(1, msgstr)    except Exception, e:        print e.message        result = build_result(0, e.message)    finally:        return result@app.route('/menu.save', methods=['GET', 'POST'])def url_save():    try:        data_request = request.data        obj = request        pass    except Exception, e:        pass    finally:        pass    passdef config_action():    #读取配置文件中连接字符串    config = ConfigParser.RawConfigParser()    config.read("/Users/sqli/PycharmProjects/flask_portal/app.config")    connectionstring = config.get("Connection", "datasource")    eis["connectionstring"] = connectionstring    passdef get_md5(data):    result = None    hash_md5 = hashlib.md5(data)    result = hash_md5.hexdigest()    return resultif __name__ == '__main__':    config_action()    app.run()